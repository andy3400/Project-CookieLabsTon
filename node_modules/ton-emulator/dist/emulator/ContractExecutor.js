"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ContractExecutor_state, _ContractExecutor_balance, _ContractExecutor_last, _ContractExecutor_lock, _ContractExecutor_index;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractExecutor = void 0;
const teslabot_1 = require("teslabot");
const ton_core_1 = require("ton-core");
const createAccount_1 = require("../utils/createAccount");
const createEmptyAccount_1 = require("../utils/createEmptyAccount");
const getMethodId_1 = require("../utils/getMethodId");
function bigIntToBuffer(v, bytes) {
    return (0, ton_core_1.beginCell)().storeUint(v, bytes * 8).endCell().beginParse().loadBuffer(bytes);
}
class ContractExecutor {
    static createEmpty(address, system) {
        return new ContractExecutor((0, createEmptyAccount_1.createEmptyAccount)(address), system);
    }
    static async create(args, system) {
        return new ContractExecutor((0, createAccount_1.createAccount)(args), system);
    }
    constructor(state, system) {
        _ContractExecutor_state.set(this, void 0);
        _ContractExecutor_balance.set(this, void 0);
        _ContractExecutor_last.set(this, { lt: 0n, hash: 0n });
        _ContractExecutor_lock.set(this, new teslabot_1.AsyncLock());
        _ContractExecutor_index.set(this, 0);
        this.override = (code, data, balance) => {
            __classPrivateFieldSet(this, _ContractExecutor_balance, balance, "f");
            __classPrivateFieldSet(this, _ContractExecutor_state, (0, createAccount_1.createAccount)({ code, data, address: this.address, balance }), "f");
            __classPrivateFieldSet(this, _ContractExecutor_last, { lt: 0n, hash: 0n }, "f");
        };
        this.get = async (method, stack) => {
            return await __classPrivateFieldGet(this, _ContractExecutor_lock, "f").inLock(async () => {
                // Check contract state
                if (__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.type !== 'active') {
                    throw new Error('Contract is not active');
                }
                if (!__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.code) {
                    throw new Error('Contract has no code');
                }
                if (!__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.data) {
                    throw new Error('Contract has no data');
                }
                // Resolve method id
                let methodId;
                if (typeof method === 'string') {
                    methodId = (0, getMethodId_1.getMethodId)(method);
                }
                else {
                    methodId = method;
                }
                let result = await this.system.bindings.runGetMethod({
                    verbosity: 3,
                    address: this.address,
                    code: __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.code,
                    data: __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.data,
                    balance: __classPrivateFieldGet(this, _ContractExecutor_balance, "f"),
                    unixtime: this.system.now,
                    randomSeed: Buffer.alloc(32),
                    gasLimit: 1000000000n,
                    methodId: methodId,
                    args: stack || [],
                    config: this.system.config
                });
                if (result.fail) {
                    return {
                        success: false,
                        error: result.message
                    };
                }
                // Check result
                if (!result.output.success) {
                    return {
                        success: false,
                        error: result.output.error
                    };
                }
                // Parse result
                let resultStack = (0, ton_core_1.parseTuple)(ton_core_1.Cell.fromBoc(Buffer.from(result.output.stack, 'base64'))[0]);
                return {
                    success: true,
                    gasUsed: BigInt(result.output.gas_used),
                    stack: new ton_core_1.TupleReader(resultStack),
                    exitCode: result.output.vm_exit_code,
                    logs: result.logs
                };
            });
        };
        this.system = system;
        this.address = state.addr;
        __classPrivateFieldSet(this, _ContractExecutor_state, state, "f");
        __classPrivateFieldSet(this, _ContractExecutor_balance, __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.balance.coins, "f");
    }
    get state() {
        let balance = __classPrivateFieldGet(this, _ContractExecutor_balance, "f");
        let last = null;
        if (__classPrivateFieldGet(this, _ContractExecutor_last, "f")) {
            last = {
                lt: __classPrivateFieldGet(this, _ContractExecutor_last, "f").lt,
                hash: bigIntToBuffer(__classPrivateFieldGet(this, _ContractExecutor_last, "f").hash, 32),
            };
        }
        if (__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.type === 'active') {
            return {
                balance,
                last,
                state: {
                    type: 'active',
                    code: __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.code ? __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.code.toBoc() : null,
                    data: __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.data ? __classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.state.data.toBoc() : null,
                }
            };
        }
        else if (__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.type === 'uninit') {
            return {
                balance,
                last,
                state: {
                    type: 'uninit',
                }
            };
        }
        else if (__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.type === 'frozen') {
            return {
                balance,
                last,
                state: {
                    type: 'frozen',
                    stateHash: bigIntToBuffer(__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.state.stateHash, 32),
                }
            };
        }
        else {
            throw new Error('Unknown contract state');
        }
    }
    get balance() {
        return __classPrivateFieldGet(this, _ContractExecutor_balance, "f");
    }
    set balance(v) {
        __classPrivateFieldSet(this, _ContractExecutor_balance, v, "f");
        __classPrivateFieldSet(this, _ContractExecutor_state, {
            ...__classPrivateFieldGet(this, _ContractExecutor_state, "f"),
            storage: {
                ...__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage,
                balance: { ...__classPrivateFieldGet(this, _ContractExecutor_state, "f").storage.balance, coins: v }
            }
        }, "f");
    }
    async receive(msg) {
        return await __classPrivateFieldGet(this, _ContractExecutor_lock, "f").inLock(async () => {
            var _a, _b;
            if (msg.info.type !== 'internal' && msg.info.type !== 'external-in') {
                throw new Error(`Unsupported message type: ${msg.info.type}`);
            }
            // Execute transaction
            let res = await this.system.bindings.transaction({
                config: this.system.config,
                libs: null,
                verbosity: 3,
                shardAccount: (0, ton_core_1.beginCell)().store((0, ton_core_1.storeShardAccount)({ account: __classPrivateFieldGet(this, _ContractExecutor_state, "f"), lastTransactionHash: __classPrivateFieldGet(this, _ContractExecutor_last, "f").hash, lastTransactionLt: __classPrivateFieldGet(this, _ContractExecutor_last, "f").lt })).endCell(),
                message: (0, ton_core_1.beginCell)().store((0, ton_core_1.storeMessage)(msg)).endCell(),
                now: this.system.now,
                lt: this.system.lt,
                randomSeed: Buffer.alloc(32),
            });
            if (res.fail) {
                throw new Error(res.message);
            }
            // Apply changes
            if (res.output.success) {
                let src = ton_core_1.Cell.fromBoc(Buffer.from(res.output.shard_account, 'base64'))[0];
                let shard = (0, ton_core_1.loadShardAccount)(src.beginParse());
                if (shard.account) {
                    __classPrivateFieldSet(this, _ContractExecutor_state, shard.account, "f");
                    __classPrivateFieldSet(this, _ContractExecutor_balance, shard.account.storage.balance.coins, "f");
                    __classPrivateFieldSet(this, _ContractExecutor_last, { lt: shard.lastTransactionLt, hash: shard.lastTransactionHash }, "f");
                }
                // Load transaction
                let t = (0, ton_core_1.loadTransaction)(ton_core_1.Cell.fromBoc(Buffer.from(res.output.transaction, 'base64'))[0].beginParse());
                return {
                    seq: (__classPrivateFieldSet(this, _ContractExecutor_index, (_b = __classPrivateFieldGet(this, _ContractExecutor_index, "f"), _a = _b++, _b), "f"), _a),
                    tx: t,
                    logs: res.logs
                };
            }
            else {
                console.warn(res.logs);
                throw Error(res.output.error);
            }
        });
    }
}
exports.ContractExecutor = ContractExecutor;
_ContractExecutor_state = new WeakMap(), _ContractExecutor_balance = new WeakMap(), _ContractExecutor_last = new WeakMap(), _ContractExecutor_lock = new WeakMap(), _ContractExecutor_index = new WeakMap();
