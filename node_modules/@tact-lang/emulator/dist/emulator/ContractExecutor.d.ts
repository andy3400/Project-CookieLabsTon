import { Address, Cell, ContractState, Message, TupleItem, TupleReader } from "ton-core";
import { Maybe } from "../utils/maybe";
import { ContractSystem } from "./ContractSystem";
import { Verbosity } from "./Verbosity";
export type GetMethodResult = {
    success: true;
    gasUsed: bigint;
    stack: TupleReader;
    exitCode: number;
    logs: string;
} | {
    success: false;
    error: string;
};
/**
 * Contract executor is wrapper around contract state
 */
export declare class ContractExecutor {
    #private;
    /**
     * Create contract empty contract executor
     * @param address contract address
     * @param system contract system
     * @returns executor instance
     */
    static createEmpty(address: Address, system: ContractSystem): ContractExecutor;
    /**
     * Create contract executor from account state
     * @param args code, data, address and balance
     * @param system contract system
     * @returns executor instance
     */
    static create(args: {
        code: Cell;
        data: Cell;
        address?: Address;
        balance?: bigint;
    }, system: ContractSystem): Promise<ContractExecutor>;
    readonly system: ContractSystem;
    readonly address: Address;
    private constructor();
    /**
     * Returns optional address name
     */
    get name(): string | null;
    /**
     * Sets optional address name
     */
    set name(v: string | null);
    /**
     * Returns contract verbosity level
     */
    get verbosity(): Verbosity | null;
    /**
     * Sets contract verbosity level
     */
    set verbosity(v: Verbosity | null);
    /**
     * Returns current state of a contract
     */
    get state(): ContractState;
    /**
     * Returns current balance of a contract
     */
    get balance(): bigint;
    /**
     * Sets current balance of a contract
     */
    set balance(v: bigint);
    /**
     * Replaces current contract state with new one
     * @param code contract code
     * @param data contract data
     * @param balance contract balance
     */
    override: (code: Cell, data: Cell, balance: bigint) => void;
    get: (method: string | number, stack?: Maybe<TupleItem[]>) => Promise<GetMethodResult>;
    receive(msg: Message): Promise<{
        seq: number;
        tx: {
            address: bigint;
            lt: bigint;
            prevTransactionHash: bigint;
            prevTransactionLt: bigint;
            now: number;
            outMessagesCount: number;
            oldStatus: import("ton-core").AccountStatus;
            endStatus: import("ton-core").AccountStatus;
            inMessage: Message | undefined;
            outMessages: import("ton-core").Dictionary<number, Message>;
            totalFees: import("ton-core").CurrencyCollection;
            stateUpdate: import("ton-core").HashUpdate;
            description: import("ton-core").TransactionDescription;
        };
        logs: string;
    }>;
}
